// Generated by gencpp from file custom_msg/movement.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_MESSAGE_MOVEMENT_H
#define CUSTOM_MSG_MESSAGE_MOVEMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace custom_msg
{
template <class ContainerAllocator>
struct movement_
{
  typedef movement_<ContainerAllocator> Type;

  movement_()
    : angle()
    , distance()  {
    }
  movement_(const ContainerAllocator& _alloc)
    : angle(_alloc)
    , distance(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _angle_type;
  _angle_type angle;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::custom_msg::movement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg::movement_<ContainerAllocator> const> ConstPtr;

}; // struct movement_

typedef ::custom_msg::movement_<std::allocator<void> > movement;

typedef boost::shared_ptr< ::custom_msg::movement > movementPtr;
typedef boost::shared_ptr< ::custom_msg::movement const> movementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg::movement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg::movement_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg::movement_<ContainerAllocator1> & lhs, const ::custom_msg::movement_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg::movement_<ContainerAllocator1> & lhs, const ::custom_msg::movement_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg::movement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::movement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::movement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::movement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::movement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::movement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg::movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d9d131ce4cf4580f59de99ac7adc6df";
  }

  static const char* value(const ::custom_msg::movement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d9d131ce4cf4580ULL;
  static const uint64_t static_value2 = 0xf59de99ac7adc6dfULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg::movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg/movement";
  }

  static const char* value(const ::custom_msg::movement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg::movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Header header\n"
"std_msgs/Float64 angle\n"
"std_msgs/Float64 distance\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::custom_msg::movement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg::movement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct movement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg::movement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg::movement_<ContainerAllocator>& v)
  {
    s << indent << "angle: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.angle);
    s << indent << "distance: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_MESSAGE_MOVEMENT_H

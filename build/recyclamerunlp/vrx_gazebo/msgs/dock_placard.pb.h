// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dock_placard.proto

#ifndef PROTOBUF_dock_5fplacard_2eproto__INCLUDED
#define PROTOBUF_dock_5fplacard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dock_placard_msgs {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dock_5fplacard_2eproto();
void protobuf_AssignDesc_dock_5fplacard_2eproto();
void protobuf_ShutdownFile_dock_5fplacard_2eproto();

class DockPlacard;

// ===================================================================

class DockPlacard : public ::google::protobuf::Message {
 public:
  DockPlacard();
  virtual ~DockPlacard();

  DockPlacard(const DockPlacard& from);

  inline DockPlacard& operator=(const DockPlacard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DockPlacard& default_instance();

  void Swap(DockPlacard* other);

  // implements Message ----------------------------------------------

  DockPlacard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DockPlacard& from);
  void MergeFrom(const DockPlacard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string shape = 1;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::std::string& shape() const;
  inline void set_shape(const ::std::string& value);
  inline void set_shape(const char* value);
  inline void set_shape(const char* value, size_t size);
  inline ::std::string* mutable_shape();
  inline ::std::string* release_shape();
  inline void set_allocated_shape(::std::string* shape);

  // required string color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline const ::std::string& color() const;
  inline void set_color(const ::std::string& value);
  inline void set_color(const char* value);
  inline void set_color(const char* value, size_t size);
  inline ::std::string* mutable_color();
  inline ::std::string* release_color();
  inline void set_allocated_color(::std::string* color);

  // @@protoc_insertion_point(class_scope:dock_placard_msgs.msgs.DockPlacard)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* shape_;
  ::std::string* color_;
  friend void  protobuf_AddDesc_dock_5fplacard_2eproto();
  friend void protobuf_AssignDesc_dock_5fplacard_2eproto();
  friend void protobuf_ShutdownFile_dock_5fplacard_2eproto();

  void InitAsDefaultInstance();
  static DockPlacard* default_instance_;
};
// ===================================================================


// ===================================================================

// DockPlacard

// required string shape = 1;
inline bool DockPlacard::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DockPlacard::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DockPlacard::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DockPlacard::clear_shape() {
  if (shape_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shape_->clear();
  }
  clear_has_shape();
}
inline const ::std::string& DockPlacard::shape() const {
  // @@protoc_insertion_point(field_get:dock_placard_msgs.msgs.DockPlacard.shape)
  return *shape_;
}
inline void DockPlacard::set_shape(const ::std::string& value) {
  set_has_shape();
  if (shape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shape_ = new ::std::string;
  }
  shape_->assign(value);
  // @@protoc_insertion_point(field_set:dock_placard_msgs.msgs.DockPlacard.shape)
}
inline void DockPlacard::set_shape(const char* value) {
  set_has_shape();
  if (shape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shape_ = new ::std::string;
  }
  shape_->assign(value);
  // @@protoc_insertion_point(field_set_char:dock_placard_msgs.msgs.DockPlacard.shape)
}
inline void DockPlacard::set_shape(const char* value, size_t size) {
  set_has_shape();
  if (shape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shape_ = new ::std::string;
  }
  shape_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dock_placard_msgs.msgs.DockPlacard.shape)
}
inline ::std::string* DockPlacard::mutable_shape() {
  set_has_shape();
  if (shape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shape_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dock_placard_msgs.msgs.DockPlacard.shape)
  return shape_;
}
inline ::std::string* DockPlacard::release_shape() {
  clear_has_shape();
  if (shape_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = shape_;
    shape_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DockPlacard::set_allocated_shape(::std::string* shape) {
  if (shape_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shape_;
  }
  if (shape) {
    set_has_shape();
    shape_ = shape;
  } else {
    clear_has_shape();
    shape_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dock_placard_msgs.msgs.DockPlacard.shape)
}

// required string color = 2;
inline bool DockPlacard::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DockPlacard::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DockPlacard::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DockPlacard::clear_color() {
  if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    color_->clear();
  }
  clear_has_color();
}
inline const ::std::string& DockPlacard::color() const {
  // @@protoc_insertion_point(field_get:dock_placard_msgs.msgs.DockPlacard.color)
  return *color_;
}
inline void DockPlacard::set_color(const ::std::string& value) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    color_ = new ::std::string;
  }
  color_->assign(value);
  // @@protoc_insertion_point(field_set:dock_placard_msgs.msgs.DockPlacard.color)
}
inline void DockPlacard::set_color(const char* value) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    color_ = new ::std::string;
  }
  color_->assign(value);
  // @@protoc_insertion_point(field_set_char:dock_placard_msgs.msgs.DockPlacard.color)
}
inline void DockPlacard::set_color(const char* value, size_t size) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    color_ = new ::std::string;
  }
  color_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dock_placard_msgs.msgs.DockPlacard.color)
}
inline ::std::string* DockPlacard::mutable_color() {
  set_has_color();
  if (color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    color_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dock_placard_msgs.msgs.DockPlacard.color)
  return color_;
}
inline ::std::string* DockPlacard::release_color() {
  clear_has_color();
  if (color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = color_;
    color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DockPlacard::set_allocated_color(::std::string* color) {
  if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete color_;
  }
  if (color) {
    set_has_color();
    color_ = color;
  } else {
    clear_has_color();
    color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dock_placard_msgs.msgs.DockPlacard.color)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace dock_placard_msgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dock_5fplacard_2eproto__INCLUDED
